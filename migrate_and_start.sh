#!/bin/sh

# Exit immediately if a command exits with a non-zero status.
set -e

# Variables
APP_NAME="fmsystem"
APP_BIN="/app/bin/${APP_NAME}" # Path inside the container

# Wait for DB (Optional but Recommended for Compose)
# Use environment variables set in docker-compose
if [ -n "$DATABASE_URL" ]; then
    db_host=$(echo $DATABASE_URL | sed -n 's/.*@\(.*\):.*/\1/p')
    db_port=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')

    if [ -n "$db_host" ] && [ -n "$db_port" ]; then
        echo "Waiting for database at ${db_host}:${db_port}..."
        # Use nc (netcat) which is available in Alpine busybox-extras
        counter=0
        while ! nc -z "${db_host}" "${db_port}"; do
          sleep 1
          counter=$((counter+1))
          if [ $counter -ge 30 ]; then
            echo "Database connection timed out after 30 seconds."
            # Exit or continue without migrations? Decide based on requirements.
            # For compose test, exiting is usually better.
            exit 1
          fi
        done
        echo "Database is up."
    else
         echo "Could not parse DB host/port from DATABASE_URL. Skipping wait."
    fi
else
    echo "DATABASE_URL not set. Skipping DB wait."
fi


# Run Migrations
echo "Running database migrations..."
# Use the release command format
eval "${APP_BIN} eval \"Fmsystem.Release.migrate\""
echo "Migrations finished."

# Run Seeds (Optional - uncomment if you have seeds to run)
# echo "Running database seeds..."
# eval "${APP_BIN} eval \"Fmsystem.Release.seed\""
# echo "Seeding finished."

# Start the server using exec to replace the shell process
echo "Starting Phoenix server..."
exec "/app/bin/server" # Use the standard server script generated by `mix release`